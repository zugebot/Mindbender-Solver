
This works if there are 3 or 4 colors.

i  = 011 011 | 011 011 | 011 011 | 011 011 | 011 011 | 011 011 | 011 011 | 011 011 | 011 011
a1 = 011     | 011     | 011     | 011     | 011     | 011     | 011     | 011     | 011
b1 =     011 |     011 |     011 |     011 |     011 |     011 |     011 |     011 |     011;
MASK_A1 = 011000'011000'011000'011000'011000'011000'011000'011000'011000;
MASK_B1 = MASK_A1 >> 3;
o1 = (i & MASK_A1) >> 1 | (i & MASK_B1);


o1 = 001 111 001 111 001 111 | 001 111 001 111 001 111 | 001 111 001 111 001 111
a2 = 001 111                 | 001 111                 | 001 111
b2 =         001 111         |         001 111         |         001 111
c2 =                 001 111 |                 001 111 |                 001 111;
MASK_A2 = 001111'000000'000000'001111'000000'000000'001111'000000'000000;
MASK_B2 = MASK_A2 >> 6;
MASK_C2 = MASK_A2 >> 12;
o2 = (o1 & MASK_A2) >> 4 | (o1 & MASK_B2) >> 2 | (o1 & MASK_C2);

o2 = 000 000 111 111 111 111 | 000 000 111 111 111 111 | 000 000 111 111 111 111
a3 = 000 000 111 111 111 111 |                         |
b3 =                         | 000 000 111 111 111 111 |
c3 =                         |                         | 000 000 111 111 111 111;
MASK_A3 = 000000'111111'111111'000000'000000'000000'000000'000000'000000;
MASK_B3 = MASK_A3 >> 18;
MASK_C3 = MASK_A3 >> 36;
o3 = (o2 & MASK_A3) >> 12 | (o2 & MASK_B3) >> 6 | (o2 & MASK_C3);

o3 = 000 000 000 000 000 000 | 111 111 111 111 111 111 | 111 111 111 111 111 111;

static const uint64_t getSegment4bits(const uint64_t segment) {
    static constexpr uint64_t MASK_A1 = 011000'011000'011000'011000'011000'011000'011000'011000'011000;
    static constexpr uint64_t MASK_B1 = MASK_A1 >> 3;
    static constexpr uint64_t MASK_A2 = 001111'000000'000000'001111'000000'000000'001111'000000'000000;
    static constexpr uint64_t MASK_B2 = MASK_A2 >> 6;
    static constexpr uint64_t MASK_C2 = MASK_A2 >> 12;
    static constexpr uint64_t MASK_A3 = 000000'111111'111111'000000'000000'000000'000000'000000'000000;
    static constexpr uint64_t MASK_B3 = MASK_A3 >> 18;
    static constexpr uint64_t MASK_C3 = MASK_A3 >> 36;

    const uint64_t o1 = (segment & MASK_A1) >> 1 | (segment & MASK_B1);
    const uint64_t o2 = (o1 & MASK_A2) >> 4 | (o1 & MASK_B2) >> 2 | (o1 & MASK_C2);
    const uint64_t o3 = (o2 & MASK_A3) >> 12 | (o2 & MASK_B3) >> 6 | (o2 & MASK_C3);
    return o3;
}




This works if there are 3 colors.




000 000 000 -> 00 000;
so;
there are 18 (000)s, so;
6 * 5 = 30;
30 * 2 = 60!!!!!!!!!!;
0, 3, 9;

 a   b   c ;
000 000 000;

9 * a + 3 * b + c;

iS = 011 011 011 | 011 011 011 | 011 011 011 | 011 011 011 | 011 011 011 | 011 011 011;
aS = 011         | 011         | 011         | 011         | 011         | 011        ;
bS =     011     |     011     |     011     |     011     |     011     |     011    ;
cS =         011 |         011 |         011 |         011 |         011 |         011;
MASK_AS = 011000000'011000000'011000000'011000000'011000000'011000000;
MASK_BS = MASK_AS >> 3;
MASK_CS = MASK_AS >> 6;

o1 = ((iS & MASK_AS) >> 6) * 9 | ((iS & MASK_BS) >> 3) * 3 | ((iS & MASK_CS));
o1 = 000 011 111 | 000 011 111 | 000 011 111 | 000 011 111 | 000 011 111 | 000 011 111;
a1 = 000 011 111 |             | 000 011 111 |             | 000 011 111 |            ;
b1 =             | 000 011 111 |             | 000 011 111 |             | 000 011 111;
MASK_A1 = 000011111'000000000'000011111'000000000'000011111'000000000;
mask_B1 = MASK_A1 >> 9;

o2 = ((o1 & MASK_A1) >> 4) | (o1 & MASK_B1);
o2 = 000 000 001 111 111 111 | 000 000 001 111 111 111 | 000 000 001 111 111 111;
a2 = 000 000 001 111 111 111 |                         |                        ;
b2 =                         | 000 000 001 111 111 111 |                        ;
c2 =                         |                         | 000 000 001 111 111 111;
MASK_A2 = 000000001'111111111'000000000'000000000'000000000'000000000;
MASK_B2 = MASK_A2 >> 18;
MASK_C2 = MASK_A2 >> 36;

o3 = ((o2 & MASK_A2) >> 16) | ((o2 & MASK_B2) >> 8) | (o2 & MASK_C2);




static const uint64_t getSegment3bits(const uint64_t segment) {
    static constexpr uint64_t MASK_AS = 0b011000000'011000000'011000000'011000000'011000000'011000000;
    static constexpr uint64_t MASK_BS = MASK_AS >> 3;
    static constexpr uint64_t MASK_CS = MASK_AS >> 6;

    const uint64_t o1 = ((iS & MASK_AS) >> 6) * 9 | ((iS & MASK_BS) >> 3) * 3 | ((iS & MASK_CS));
    static constexpr uint64_t MASK_A1 = 0b000011111'000000000'000011111'000000000'000011111'000000000;
    static constexpr uint64_t mask_B1 = MASK_A1 >> 9;

    const uint64_t o2 = ((o1 & MASK_A1) >> 4) | (o1 & MASK_B1);
    static constexpr uint64_t MASK_A2 = 0b000000001'111111111'000000000'000000000'000000000'000000000;
    static constexpr uint64_t MASK_B2 = MASK_A2 >> 18;
    static constexpr uint64_t MASK_C2 = MASK_A2 >> 36;

    const uint64_t o3 = ((o2 & MASK_A2) >> 16) | ((o2 & MASK_B2) >> 8) | (o2 & MASK_C2);
    return o3;
}





This works if there are 2 colors;


o1 = 001 001 | 001 001 | 001 001 | 001 001 | 001 001 | 001 001 | 001 001 | 001 001 | 001 001
a1 = 001     | 001     | 001     | 001     | 001     | 001     | 001     | 001     | 001
b1 =     001 |     001 |     001 |     001 |     001 |     001 |     001 |     001 |     001
MASK_A1 = 001000'001000'001000'001000'001000'001000'001000'001000'001000
MASK_B1 = 000001'000001'000001'000001'000001'000001'000001'000001'000001
o2 = (a1 & A1_MASK) >> 2 | (b1 & B1_MASK)

o2 = 000 011 000 011 000 011 | 000 011 000 011 000 011 | 000 011 000 011 000 011
a2 = 000 011                 | 000 011                 | 000 011
b2 =         000 011         |         000 011         |         000 011
c2 = --- --- --- --- 000 011 |                 000 011 |                 000 011
MASK_A2 = 000011'000000'000000'000011'000000'000000'000011'000000'000000
MASK_B2 = 000000'000011'000000'000000'000011'000000'000000'000011'000000
MASK_C2 = 000000'000000'000011'000000'000000'000011'000000'000000'000011
o3 = (a2 & A2_MASK) >> 8 | (b2 & ) >> 4 | (c2)

o3 = 000 000 000 000 111 111 | 000 000 000 000 111 111 | 000 000 000 000 111 111
a3 = 000 000 000 000 111 111 |                         |
b3 =                         | 000 000 000 000 111 111 |
c3 =                         |                         | 000 000 000 000 111 111
MASK_A3 = 000000'000000'111111'000000'000000'000000'000000'000000'000000
MASK_B3 = 000000'000000'000000'000000'000000'111111'000000'000000'000000
MASK_C3 = 000000'000000'000000'000000'000000'000000'000000'000000'111111
o4 = a3 >> 24 | b3 >> 12 | c3

o4 = 000 000 000 000 000 000 | 000 000 000 000 000 000 | 111 111 111 111 111 111




static const uint64_t getSegment2bits(const uint64_t segment) {
    static constexpr uint64_t MASK_A1 = 0b001000'001000'001000'001000'001000'001000'001000'001000'001000;
    static constexpr uint64_t MASK_B1 = MASK_A1 >> 3;
    static constexpr uint64_t MASK_A2 = 0b000011'000000'000000'000011'000000'000000'000011'000000'000000;
    static constexpr uint64_t MASK_B2 = MASK_A2 >> 6;
    static constexpr uint64_t MASK_C2 = MASK_A2 >> 12;
    static constexpr uint64_t MASK_A3 = 0b000000'000000'111111'000000'000000'000000'000000'000000'000000;
    static constexpr uint64_t MASK_B3 = MASK_A3 >> 18;
    static constexpr uint64_t MASK_C3 = MASK_A3 >> 36;
    const uint64_t o1 = (segment & MASK_A1) >> 2 | (segment & MASK_B1);
    const uint64_t o2 = (o1 & MASK_A2) >> 8 | (o1 & MASK_B2) >> 4 | (o1 & MASK_C2);
    const uint64_t o3 = (o2 & MASK_A3) >> 24 | (o2 & MASK_B3) >> 12 | (o2 & MASK_C3);
}

