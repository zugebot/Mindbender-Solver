#include "rotations.hpp"

#ifdef USE_CUDA
#include <cuda_runtime.h>
#endif


ActStruct allActStructList[114] = {
        // {action, index, isColNotFat, tillNext, tillLast, name}
        {R01,    0, 2, 5, 0, "R01" }, {R02,    1, 2, 4, 1, "R02" }, {R03,    2, 2, 3, 2, "R03" }, {R04,    3, 2, 2, 3, "R04" }, {R05,    4, 2, 1, 4, "R05" },
        {R11,    5, 2, 5, 0, "R11" }, {R12,    6, 2, 4, 1, "R12" }, {R13,    7, 2, 3, 2, "R13" }, {R14,    8, 2, 2, 3, "R14" }, {R15,    9, 2, 1, 4, "R15" },
        {R21,   10, 2, 5, 0, "R21" }, {R22,   11, 2, 4, 1, "R22" }, {R23,   12, 2, 3, 2, "R23" }, {R24,   13, 2, 2, 3, "R24" }, {R25,   14, 2, 1, 4, "R25" },
        {R31,   15, 2, 5, 0, "R31" }, {R32,   16, 2, 4, 1, "R32" }, {R33,   17, 2, 3, 2, "R33" }, {R34,   18, 2, 2, 3, "R34" }, {R35,   19, 2, 1, 4, "R35" },
        {R41,   20, 2, 5, 0, "R41" }, {R42,   21, 2, 4, 1, "R42" }, {R43,   22, 2, 3, 2, "R43" }, {R44,   23, 2, 2, 3, "R44" }, {R45,   24, 2, 1, 4, "R45" },
        {R51,   25, 2, 5, 0, "R51" }, {R52,   26, 2, 4, 1, "R52" }, {R53,   27, 2, 3, 2, "R53" }, {R54,   28, 2, 2, 3, "R54" }, {R55,   29, 2, 1, 4, "R55" },
        {nullptr,0, 0, 0, 0, "XXX" }, {nullptr,0, 0, 0, 0, "XXX" },

        {C01,   32, 1, 5, 0, "C01" }, {C02,   33, 1, 4, 1, "C02" }, {C03,   34, 1, 3, 2, "C03" }, {C04,   35, 1, 2, 3, "C04" }, {C05,   36, 1, 1, 4, "C05" },
        {C11,   37, 1, 5, 0, "C11" }, {C12,   38, 1, 4, 1, "C12" }, {C13,   39, 1, 3, 2, "C13" }, {C14,   40, 1, 2, 3, "C14" }, {C15,   41, 1, 1, 4, "C15" },
        {C21,   42, 1, 5, 0, "C21" }, {C22,   43, 1, 4, 1, "C22" }, {C23,   44, 1, 3, 2, "C23" }, {C24,   45, 1, 2, 3, "C24" }, {C25,   46, 1, 1, 4, "C25" },
        {C31,   47, 1, 5, 0, "C31" }, {C32,   48, 1, 4, 1, "C32" }, {C33,   49, 1, 3, 2, "C33" }, {C34,   50, 1, 2, 3, "C34" }, {C35,   51, 1, 1, 4, "C35" },
        {C41,   52, 1, 5, 0, "C41" }, {C42,   53, 1, 4, 1, "C42" }, {C43,   54, 1, 3, 2, "C43" }, {C44,   55, 1, 2, 3, "C44" }, {C45,   56, 1, 1, 4, "C45" },
        {C51,   57, 1, 5, 0, "C51" }, {C52,   58, 1, 4, 1, "C52" }, {C53,   59, 1, 3, 2, "C53" }, {C54,   60, 1, 2, 3, "C54" }, {C55,   61, 1, 1, 4, "C55" },

        {nullptr,0, 0, 0, 0, "XXX" }, {nullptr,0, 0, 0, 0, "XXX" },

        {R011,  64, 0, 4, 0, "R011"}, {R012,  65, 0, 3, 1, "R012"}, {R013,  66, 0, 2, 2, "R013"}, {R014,  67, 0, 1, 3, "R014"}, {R015,  68, 0, 0, 4, "R015"},
        {R121,  69, 0, 4, 0, "R121"}, {R122,  70, 0, 3, 1, "R122"}, {R123,  71, 0, 2, 2, "R123"}, {R124,  72, 0, 1, 3, "R124"}, {R125,  73, 0, 0, 4, "R125"},
        {R231,  74, 0, 4, 0, "R231"}, {R232,  75, 0, 3, 1, "R232"}, {R233,  76, 0, 2, 2, "R233"}, {R234,  77, 0, 1, 3, "R234"}, {R235,  78, 0, 0, 4, "R235"},
        {R341,  79, 0, 4, 0, "R341"}, {R342,  80, 0, 3, 1, "R342"}, {R343,  81, 0, 2, 2, "R343"}, {R344,  82, 0, 1, 3, "R344"}, {R345,  83, 0, 0, 4, "R345"},
        {R451,  84, 0, 4, 0, "R451"}, {R452,  85, 0, 3, 1, "R452"}, {R453,  86, 0, 2, 2, "R453"}, {R454,  87, 0, 1, 3, "R454"}, {R455,  88, 0, 0, 4, "R455"},

        {C011,  89, 0, 4, 0, "C011"}, {C012,  90, 0, 3, 1, "C012"}, {C013,  91, 0, 2, 2, "C013"}, {C014,  92, 0, 1, 3, "C014"}, {C015,  93, 0, 0, 4, "C015"},
        {C121,  94, 0, 4, 0, "C121"}, {C122,  95, 0, 3, 1, "C122"}, {C123,  96, 0, 2, 2, "C123"}, {C124,  97, 0, 1, 3, "C124"}, {C125,  98, 0, 0, 4, "C125"},
        {C231,  99, 0, 4, 0, "C231"}, {C232, 100, 0, 3, 1, "C232"}, {C233, 101, 0, 2, 2, "C233"}, {C234, 102, 0, 1, 3, "C234"}, {C235, 103, 0, 0, 4, "C235"},
        {C341, 104, 0, 4, 0, "C341"}, {C342, 105, 0, 3, 1, "C342"}, {C343, 106, 0, 2, 2, "C343"}, {C344, 107, 0, 1, 3, "C344"}, {C345, 108, 0, 0, 4, "C345"},
        {C451, 109, 0, 4, 0, "C451"}, {C452, 110, 0, 3, 1, "C452"}, {C453, 111, 0, 2, 2, "C453"}, {C454, 112, 0, 1, 3, "C454"}, {C455, 113, 0, 0, 4, "C455"},
};




#ifdef USE_CUDA

namespace my_cuda {

    MU __constant__ u64 CUDA_ROW_MASKS[3] = {
            0'1777'000000'777777'777777,
            0'1777'777777'000000'777777,
            0'1777'777777'777777'000000,
    };

    MU __constant__ R_X_X_data CUDA_RXX_DATA[15] = {
            {0'0000'777770'000000'000000, 0'0000'000007'000000'000000, 0,  3, 15},
            {0'0000'777700'000000'000000, 0'0000'000077'000000'000000, 0,  6, 12},
            {0'0000'777000'000000'000000, 0'0000'000777'000000'000000, 0,  9,  9},
            {0'0000'770000'000000'000000, 0'0000'007777'000000'000000, 0, 12,  6},
            {0'0000'700000'000000'000000, 0'0000'077777'000000'000000, 0, 15,  3},
            {0'0000'000000'777770'000000, 0'0000'000000'000007'000000, 1,  3, 15},
            {0'0000'000000'777700'000000, 0'0000'000000'000077'000000, 1,  6, 12},
            {0'0000'000000'777000'000000, 0'0000'000000'000777'000000, 1,  9,  9},
            {0'0000'000000'770000'000000, 0'0000'000000'007777'000000, 1, 12,  6},
            {0'0000'000000'700000'000000, 0'0000'000000'077777'000000, 1, 15,  3},
            {0'0000'000000'000000'777770, 0'0000'000000'000000'000007, 2,  3, 15},
            {0'0000'000000'000000'777700, 0'0000'000000'000000'000077, 2,  6, 12},
            {0'0000'000000'000000'777000, 0'0000'000000'000000'000777, 2,  9,  9},
            {0'0000'000000'000000'770000, 0'0000'000000'000000'007777, 2, 12,  6},
            {0'0000'000000'000000'700000, 0'0000'000000'000000'077777, 2, 15,  3},
    };

    MU __device__ void R_X_X(B1B2& board, int idx) {

        C bool is_R3_to_r5 = idx >= 15;
        R_X_X_data data = CUDA_RXX_DATA[idx - 15 * is_R3_to_r5];

        u64* addr = &board.b1 + is_R3_to_r5;
        *addr = (*addr & CUDA_ROW_MASKS[data.rowNum])
                | ((*addr & data.maskRB) >> data.shiftR)
                | ((*addr & data.maskRS) << data.shiftL);
    }


    // New R_X_X function that copies and modifies
    MU __device__ void R_X_X_copy(C B1B2* src, B1B2* dest, u32 idx) {
        // Copy the source board to destination
        *dest = *src;

        // Determine if we are operating on R3 to R5 based on idx
        // 0b11111111111111111000000000000000
        bool is_R3_to_r5 = idx >= 15;

        // Fetch the appropriate R_X_X_data
        R_X_X_data data = CUDA_RXX_DATA[idx - 15 * is_R3_to_r5];

        // Compute the address based on is_R3_to_r5
        u64* addr = &dest->b1 + is_R3_to_r5;

        // Apply the permutation on the destination board
        *addr = (*addr & CUDA_ROW_MASKS[data.rowNum])
                | ((*addr & data.maskRB) >> data.shiftR)
                | ((*addr & data.maskRS) << data.shiftL);
    }


    MU __constant__ u64 CUDA_COL_MASKS[6] = {
            0'700000'700000'700000,
            0'070000'070000'070000,
            0'007000'007000'007000,
            0'000700'000700'000700,
            0'000070'000070'000070,
            0'000007'000007'000007,
    };

    MU __constant__ u32 CUDA_COL_OFF1[9] = {36, 18, 0, 36, 18, 36, 54, 18, 36};

    MU __constant__ PrecomputedIdx PRECOMPUTED_IDX[30] = {
            {0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4},
            {1, 0}, {1, 1}, {1, 2}, {1, 3}, {1, 4},
            {2, 0}, {2, 1}, {2, 2}, {2, 3}, {2, 4},
            {3, 0}, {3, 1}, {3, 2}, {3, 3}, {3, 4},
            {4, 0}, {4, 1}, {4, 2}, {4, 3}, {4, 4},
            {5, 0}, {5, 1}, {5, 2}, {5, 3}, {5, 4},
    };

    MU __device__ void C_X_X(B1B2 &board, int idx) {
        C u8 mod5 = PRECOMPUTED_IDX[idx].mod5;
        C u64 C_MASK_X = CUDA_COL_MASKS[PRECOMPUTED_IDX[idx].div5];


        C u64 vars[2] = {board.b1 & C_MASK_X, board.b2 & C_MASK_X};

        C i32 idx1 = (mod5 <= 2) ? 1 : 0;
        C u64 *ptr1 = &vars[idx1];
        C u64 *ptr2 = &vars[1 - idx1];

        board.b1 = ((*ptr1 << CUDA_COL_OFF1[mod5] | *ptr2 >>
            (CUDA_COL_OFF1 + 4)[mod5]) & C_MASK_X) | board.b1 & ~C_MASK_X;
        board.b2 = ((*ptr2 << CUDA_COL_OFF1[mod5] | *ptr1 >>
            (CUDA_COL_OFF1 + 4)[mod5]) & C_MASK_X) | board.b2 & ~C_MASK_X;
    }


    // New C_X_X function that copies and modifies
    MU __device__ void C_X_X_copy(C B1B2* src, B1B2* dest, u32 idx) {
        // Copy the source board to destination
        *dest = *src;

        // Retrieve precomputed indices
        u8 mod5 = PRECOMPUTED_IDX[idx].mod5;
        u64 C_MASK_X = CUDA_COL_MASKS[PRECOMPUTED_IDX[idx].div5];

        // Extract relevant parts of the board
        u64 vars[2] = {dest->b1 & C_MASK_X, dest->b2 & C_MASK_X};

        // Determine indices based on mod5
        int idx1 = (mod5 <= 2) ? 1 : 0;
        u64* ptr1 = &vars[idx1];
        u64* ptr2 = &vars[1 - idx1];

        // Perform the permutation on the destination board
        dest->b1 = ((*ptr1 << CUDA_COL_OFF1[mod5] | *ptr2 >>
            CUDA_COL_OFF1[mod5 + 4]) & C_MASK_X) | (dest->b1 & ~C_MASK_X);
        dest->b2 = ((*ptr2 << CUDA_COL_OFF1[mod5] | *ptr1 >>
            CUDA_COL_OFF1[mod5 + 4]) & C_MASK_X) | (dest->b2 & ~C_MASK_X);
    }


    MU __constant__ ActStructGPU allActStructListGPU[114] = {
            // {action, index, isColNotFat, tillNext, tillLast}
            {R01,    0, 2, 5, 0}, {R02,    1, 2, 4, 1}, {R03,    2, 2, 3, 2}, {R04,    3, 2, 2, 3}, {R05,    4, 2, 1, 4},
            {R11,    5, 2, 5, 0}, {R12,    6, 2, 4, 1}, {R13,    7, 2, 3, 2}, {R14,    8, 2, 2, 3}, {R15,    9, 2, 1, 4},
            {R21,   10, 2, 5, 0}, {R22,   11, 2, 4, 1}, {R23,   12, 2, 3, 2}, {R24,   13, 2, 2, 3}, {R25,   14, 2, 1, 4},
            {R31,   15, 2, 5, 0}, {R32,   16, 2, 4, 1}, {R33,   17, 2, 3, 2}, {R34,   18, 2, 2, 3}, {R35,   19, 2, 1, 4},
            {R41,   20, 2, 5, 0}, {R42,   21, 2, 4, 1}, {R43,   22, 2, 3, 2}, {R44,   23, 2, 2, 3}, {R45,   24, 2, 1, 4},
            {R51,   25, 2, 5, 0}, {R52,   26, 2, 4, 1}, {R53,   27, 2, 3, 2}, {R54,   28, 2, 2, 3}, {R55,   29, 2, 1, 4},
            {nullptr,0, 0, 0, 0},
            {nullptr,0, 0, 0, 0},

            {C01,   32, 1, 5, 0}, {C02,   33, 1, 4, 1}, {C03,   34, 1, 3, 2}, {C04,   35, 1, 2, 3}, {C05,   36, 1, 1, 4},
            {C11,   37, 1, 5, 0}, {C12,   38, 1, 4, 1}, {C13,   39, 1, 3, 2}, {C14,   40, 1, 2, 3}, {C15,   41, 1, 1, 4},
            {C21,   42, 1, 5, 0}, {C22,   43, 1, 4, 1}, {C23,   44, 1, 3, 2}, {C24,   45, 1, 2, 3}, {C25,   46, 1, 1, 4},
            {C31,   47, 1, 5, 0}, {C32,   48, 1, 4, 1}, {C33,   49, 1, 3, 2}, {C34,   50, 1, 2, 3}, {C35,   51, 1, 1, 4},
            {C41,   52, 1, 5, 0}, {C42,   53, 1, 4, 1}, {C43,   54, 1, 3, 2}, {C44,   55, 1, 2, 3}, {C45,   56, 1, 1, 4},
            {C51,   57, 1, 5, 0}, {C52,   58, 1, 4, 1}, {C53,   59, 1, 3, 2}, {C54,   60, 1, 2, 3}, {C55,   61, 1, 1, 4},
            {nullptr,0, 0, 0, 0},
            {nullptr,0, 0, 0, 0},

            {R011,  64, 0, 4, 0}, {R012,  65, 0, 3, 1}, {R013,  66, 0, 2, 2}, {R014,  67, 0, 1, 3}, {R015,  68, 0, 0, 4},
            {R121,  69, 0, 4, 0}, {R122,  70, 0, 3, 1}, {R123,  71, 0, 2, 2}, {R124,  72, 0, 1, 3}, {R125,  73, 0, 0, 4},
            {R231,  74, 0, 4, 0}, {R232,  75, 0, 3, 1}, {R233,  76, 0, 2, 2}, {R234,  77, 0, 1, 3}, {R235,  78, 0, 0, 4},
            {R341,  79, 0, 4, 0}, {R342,  80, 0, 3, 1}, {R343,  81, 0, 2, 2}, {R344,  82, 0, 1, 3}, {R345,  83, 0, 0, 4},
            {R451,  84, 0, 4, 0}, {R452,  85, 0, 3, 1}, {R453,  86, 0, 2, 2}, {R454,  87, 0, 1, 3}, {R455,  88, 0, 0, 4},
            {C011,  89, 0, 4, 0}, {C012,  90, 0, 3, 1}, {C013,  91, 0, 2, 2}, {C014,  92, 0, 1, 3}, {C015,  93, 0, 0, 4},
            {C121,  94, 0, 4, 0}, {C122,  95, 0, 3, 1}, {C123,  96, 0, 2, 2}, {C124,  97, 0, 1, 3}, {C125,  98, 0, 0, 4},
            {C231,  99, 0, 4, 0}, {C232, 100, 0, 3, 1}, {C233, 101, 0, 2, 2}, {C234, 102, 0, 1, 3}, {C235, 103, 0, 0, 4},
            {C341, 104, 0, 4, 0}, {C342, 105, 0, 3, 1}, {C343, 106, 0, 2, 2}, {C344, 107, 0, 1, 3}, {C345, 108, 0, 0, 4},
            {C451, 109, 0, 4, 0}, {C452, 110, 0, 3, 1}, {C453, 111, 0, 2, 2}, {C454, 112, 0, 1, 3}, {C455, 113, 0, 0, 4},
    };

}
#endif


u8 fatActionsIndexes[25][48] = {
/*  X  Y          0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23    24  25  26  27  28  29  30  31  32  33  34   35   36   37  38   39   40   41   42   43   44   45   46   47 */
/* (0, 0)  0 */ {64, 65, 66, 67, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   89, 90, 91, 92, 42, 43, 44, 45, 46, 47, 48,  49,  50,  51, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (0, 1)  1 */ { 0,  1,  2,  3,  4, 69, 70, 71, 72, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   89, 90, 91, 93, 42, 43, 44, 45, 46, 47, 48,  49,  50,  51, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (0, 2)  2 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 74, 75, 76, 77, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   89, 90, 92, 93, 42, 43, 44, 45, 46, 47, 48,  49,  50,  51, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (0, 3)  3 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 79, 80, 81, 82, 25, 26, 27, 28, 29,   89, 91, 92, 93, 42, 43, 44, 45, 46, 47, 48,  49,  50,  51, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (0, 4)  4 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 84, 85, 86, 87,   90, 91, 92, 93, 42, 43, 44, 45, 46, 47, 48,  49,  50,  51, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (1, 0)  5 */ {64, 65, 66, 68, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 94, 95, 96, 97, 47, 48,  49,  50,  51, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (1, 1)  6 */ { 0,  1,  2,  3,  4, 69, 70, 71, 73, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 94, 95, 96, 98, 47, 48,  49,  50,  51, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (1, 2)  7 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 74, 75, 76, 78, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 94, 95, 97, 98, 47, 48,  49,  50,  51, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (1, 3)  8 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 79, 80, 81, 83, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 94, 96, 97, 98, 47, 48,  49,  50,  51, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (1, 4)  9 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 84, 85, 86, 88,   32, 33, 34, 35, 36, 95, 96, 97, 98, 47, 48,  49,  50,  51, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (2, 0) 10 */ {64, 65, 67, 68, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 99, 100, 101, 102, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (2, 1) 11 */ { 0,  1,  2,  3,  4, 69, 70, 72, 73, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 99, 100, 101, 103, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (2, 2) 12 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 74, 75, 77, 78, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 99, 100, 102, 103, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (2, 3) 13 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 79, 80, 82, 83, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 99, 101, 102, 103, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (2, 4) 14 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 84, 85, 87, 88,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 00, 101, 102, 103, 52,  53,  54,  55,  56,  57,  58,  59,  60,  61},
/* (3, 0) 15 */ {64, 66, 67, 68, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,  43,  44,  45, 46, 104, 105, 106, 107,  57,  58,  59,  60,  61},
/* (3, 1) 16 */ { 0,  1,  2,  3,  4, 69, 71, 72, 73, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,  43,  44,  45, 46, 104, 105, 106, 108,  57,  58,  59,  60,  61},
/* (3, 2) 17 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 74, 76, 77, 78, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,  43,  44,  45, 46, 104, 105, 107, 108,  57,  58,  59,  60,  61},
/* (3, 3) 18 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 79, 81, 82, 83, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,  43,  44,  45, 46, 104, 106, 107, 108,  57,  58,  59,  60,  61},
/* (3, 4) 19 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 84, 86, 87, 88,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,  43,  44,  45, 46, 105, 106, 107, 108,  57,  58,  59,  60,  61},
/* (4, 0) 20 */ {65, 66, 67, 68, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,  43,  44,  45, 46,  47,  48,  49,  50,  51, 109, 110, 111, 112},
/* (4, 1) 21 */ { 0,  1,  2,  3,  4, 70, 71, 72, 73, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,  43,  44,  45, 46,  47,  48,  49,  50,  51, 109, 110, 111, 113},
/* (4, 2) 22 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 75, 76, 77, 78, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,  43,  44,  45, 46,  47,  48,  49,  50,  51, 109, 110, 112, 113},
/* (4, 3) 23 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 80, 81, 82, 83, 25, 26, 27, 28, 29,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,  43,  44,  45, 46,  47,  48,  49,  50,  51, 109, 111, 112, 113},
/* (4, 4) 24 */ { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 85, 86, 87, 88,   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,  43,  44,  45, 46,  47,  48,  49,  50,  51, 110, 111, 112, 113},
};


void applyMoves(Board &board, C Memory &memory) {
    for (int i = 0; i < memory.getMoveCount(); i++)
        allActStructList[memory.getMove(i)].action(board);
}


void applyFatMoves(Board &board, C Memory &memory) {
    for (int index = 0; index < memory.getMoveCount(); index++) {
        C u8 move = memory.getMove(index);

        C u8* funcIndexes = fatActionsIndexes[board.getFatXY()];
        allActStructList[funcIndexes[move]].action(board);
    }
}


Board makeBoardWithMoves(C Board& board, C Memory& memory) {
    Board temp = board;
    applyMoves(temp, memory);
    return temp;
}


Board makeBoardWithFatMoves(C Board& board, C Memory& memory) {
    Board temp = board;
    applyFatMoves(temp, memory);
    return temp;
}